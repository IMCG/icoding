#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;
};
void Push(struct node**head,int elem)
{
	struct node*temp=(struct node*)malloc(sizeof(struct node));
	temp->data=elem;
	temp->next=*head;
	*head=temp;
}
void Print(struct node*head){
	struct node*current=head;
	while(current!=NULL)
	{
		printf("%d ",current->data);
		current=current->next;
	}
	printf("\n");
}
int Length(struct node*head)
{
	int count=0;
	while(head)
	{
		count++;
		head=head->next;
	}
	return count;
}
//uses the "count the nodes" strategy
void FrontBackSplit(struct node*sourse,struct node**frontRef,struct node**backRef)
{
	int len=Length(sourse);
	int i;
	struct node*current=sourse;
	if(len<2){
		*frontRef=sourse;
		*backRef=NULL;
	}else{
		int hopCount=(len-1)/2;
		for(i=0;i<hopCount;i++)
		{
			current=current->next;
		}
		//now cut at current
		*frontRef=sourse;
		*backRef=current->next;
		current->next=NULL;
	}
}
//uses th fast/slow pointer strategy
void FrontBackSplit1(struct node*sourse,struct node**frontRef,struct node**backRef)
{
	struct node*fast;
	struct node*slow;

	if(sourse==NULL || sourse->next==NULL){
		*frontRef=sourse;
		*backRef=NULL;
	}else{
		slow=sourse;
		fast=sourse->next;
		//advance fast two nodes,and slow advance slow one node
		while(fast!=NULL)
		{
			fast=fast->next;
			if(fast!=NULL)
			{
				fast=fast->next;
				slow=slow->next;
			}
		}
		*frontRef=sourse;
		*backRef=slow->next;
		slow->next=NULL;
	}
}
int main()
{
	int A[]={1,2,3,4,5,6,7};
	struct node*head=NULL;
	for(int i=6;i>=0;i--)
		Push(&head,A[i]);
	Print(head);
	struct node*frontRef=NULL;
	struct node*backRef=NULL;
	FrontBackSplit(head,&frontRef,&backRef);
	printf("frontRef...\n");
	Print(frontRef);
	printf("backRef...\n");
	Print(backRef);
}