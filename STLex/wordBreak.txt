#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<unordered_set>
using namespace std;
class Solution{
public:
	bool wordBreak(string text,vector<string> coll)
	{
		if(find(coll.begin(),coll.end(),text)!=coll.end()) return true;

		int n=text.length();
		for(int i=1;i<n;i++)
		{
			string s1=text.substr(0,i),s2=text.substr(i);
			if(find(coll.begin(),coll.end(),s1)!=coll.end())
			{
				return wordBreak(s2,coll);
			}
		}
		return false;
	}
}; 
class Solution1{
public:
	bool wordBreak(string text,unordered_set<string> coll)
	{
		vector<bool> f(text.size()+1,false);
		f[0]=true;
		for(int i=1;i<text.size();++i)
		{
			for(int j=i-1;j>=0;--j)
			{
				if(f[j]&& coll.find(text.substr(i-j)) != coll.end())
				{
					f[i]=true;
					break;
				}
			}
		}
		return f[text.size()];
	}
};
class Solution2{
public:
	bool wordBreak(string text,unordered_set<string> &dict)
	{
		return dfs(text,dict,0,0);
	}
private:
	static bool dfs(const string&text,unordered_set<string> &dict,
		size_t start,size_t cur)
	{
		if(cur==text.size())
		{
			return dict.find(text.substr(start,cur-start+1))!=dict.end();
		}
		if(dfs(text,dict,start,cur+1)) return true;
		if(dict.find(text.substr(start,cur-start+1))!=dict.end())
			if(dfs(text,dict,cur+1,cur+1))  return true;
		return false;
	}
};
int main()
{
	string text="leetcode";
	unordered_set<string> coll; 
	coll.insert("leet");
	coll.insert("code");
	Solution1 s;
	cout<<s.wordBreak(text,coll)<<endl;
}